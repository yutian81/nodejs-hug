name: Deploy to Hugging Face

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 */2 * * *'

  # 当 Uptime Kuma API 发送 'service-down-alert' 事件时触发此工作流。
  repository_dispatch:
    types: [service-down-alert]

jobs:
  deploy-and-sync:
    runs-on: ubuntu-latest
    
    env:
      HF_USER: ${{ secrets.HF_USER }}
      HF_SPACE: ${{ secrets.HF_SPACE }}
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      UUID: ${{ secrets.UUID }}
      NEZHA_SERVER: ${{ secrets.NEZHA_SERVER }}
      NEZHA_PORT: ${{ secrets.NEZHA_PORT }}
      NEZHA_KEY: ${{ secrets.NEZHA_KEY }}
      ARGO_DOMAIN: ${{ secrets.ARGO_DOMAIN }}
      ARGO_AUTH: ${{ secrets.ARGO_AUTH }}
      CFIP: ${{ secrets.CFIP }}
      CFPORT: ${{ secrets.CFPORT }}
      NAME: ${{ secrets.NAME }}
      UPLOAD_URL: ${{ secrets.UPLOAD_URL }}
      PROJECT_URL: ${{ secrets.PROJECT_URL }}
      AUTO_ACCESS: ${{ secrets.AUTO_ACCESS }}
      FILE_PATH: ${{ secrets.FILE_PATH }}
      SUB_PATH: ${{ secrets.SUB_PATH }}
      PORT: ${{ secrets.PORT }}
      ARGO_PORT: ${{ secrets.ARGO_PORT }}

    steps:
      - name: Check Trigger Event
        run: |
          echo "Workflow triggered by: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "触发事件类型 (Event Type): ${{ github.event.action }}"
            echo "收到来自 Uptime Kuma 的下线通知，开始执行自动恢复部署流程..."
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "工作流被手动触发，开始执行部署..."
          else
            echo "工作流由计划任务触发，开始执行部署..."
          fi

      - name: Install Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install git-lfs -y

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: 'main'
          fetch-depth: 0
          lfs: true

      - name: Recreate Hugging Face Space via Python
        run: |
          pip install "huggingface_hub>=0.20.0"

          cat << 'EOF' > manage_space.py
          import os
          import sys
          import time
          from huggingface_hub import HfApi
          from huggingface_hub.utils import RepositoryNotFoundError, HfHubHTTPError

          def main():
              # 从环境变量中读取用户名和 Space 名
              hf_user = os.environ.get("HF_USER")
              hf_space = os.environ.get("HF_SPACE")
              token = os.environ.get("HF_TOKEN")
              
              # 确保机密已设置
              if not hf_user or not hf_space or not token:
                  print("--- [Python脚本] 错误：HF_USER, HF_SPACE, 或 HF_TOKEN 环境变量未设置！")
                  print("--- [Python脚本] 请检查您 GitHub 仓库的 Secrets 配置。")
                  sys.exit(1)
              
              repo_id = f"{hf_user}/{hf_space}"
              
              print(f"--- [Python脚本] 准备进行全新部署 ---")
              print(f"--- [Python脚本] 目标Space: {repo_id}")

              try:
                  api = HfApi(token=token)
                  print("--- [Python脚本] HfApi客户端初始化成功。")

                  # --- 删除操作 ---
                  print("\n--- [Python脚本] 步骤1: 正在尝试删除旧的Space...")
                  try:
                      api.repo_info(repo_id=repo_id, repo_type="space")
                      print(f"--- [Python脚本] 发现已存在的Space '{repo_id}'。正在发送删除请求...")
                      api.delete_repo(repo_id=repo_id, repo_type="space")
                      print(f"--- [Python脚本] 删除请求已发送。等待10秒以确保后台完成操作...")
                      time.sleep(10)
                  except RepositoryNotFoundError:
                      print(f"--- [Python脚本] Space '{repo_id}' 不存在，无需删除。")
                  
                  # --- 创建操作 ---
                  print("\n--- [Python脚本] 步骤2: 正在创建一个全新的免费版Space...")
                  api.create_repo(
                      repo_id=repo_id,
                      repo_type="space",
                      space_sdk="docker",
                      space_hardware="cpu-basic",
                      private=False,
                  )
                  print(f"--- [Python脚本] 成功创建全新的Space: {repo_id}")

              except HfHubHTTPError as e:
                  print(f"--- [Python脚本] 发生致命API错误！---")
                  print(f"请立即检查您的 HF_TOKEN 是否拥有 'write' 权限。")
                  print(f"详细错误: {e}")
                  sys.exit(1)
              except Exception as e:
                  print(f"--- [Python脚本] 发生未知错误: {e}")
                  sys.exit(1)

          if __name__ == "__main__":
              main()
          EOF

          python manage_space.py

      - name: Create README.md for Space configuration
        run: |
          echo "---
          title: ${HF_SPACE}
          emoji: 🚀
          colorFrom: blue
          colorTo: green
          sdk: docker
          app_port: 3000
          ---
          " > README.md

      - name: Inject secrets into Dockerfile
        run: |
          sed -i "s|__UUID__|${UUID}|g" Dockerfile
          sed -i "s|__NEZHA_SERVER__|${NEZHA_SERVER}|g" Dockerfile
          sed -i "s|__NEZHA_PORT__|${NEZHA_PORT}|g" Dockerfile
          sed -i "s|__NEZHA_KEY__|${NEZHA_KEY}|g" Dockerfile
          sed -i "s|__ARGO_DOMAIN__|${ARGO_DOMAIN}|g" Dockerfile
          sed -i "s|__ARGO_AUTH__|${ARGO_AUTH}|g" Dockerfile
          sed -i "s|__CFIP__|${CFIP}|g" Dockerfile
          sed -i "s|__CFPORT__|${CFPORT}|g" Dockerfile
          sed -i "s|__NAME__|${NAME}|g" Dockerfile
          sed -i "s|__UPLOAD_URL__|${UPLOAD_URL}|g" Dockerfile
          sed -i "s|__PROJECT_URL__|${PROJECT_URL}|g" Dockerfile
          sed -i "s|__AUTO_ACCESS__|${AUTO_ACCESS}|g" Dockerfile
          sed -i "s|__FILE_PATH__|${FILE_PATH}|g" Dockerfile
          sed -i "s|__SUB_PATH__|${SUB_PATH}|g" Dockerfile
          sed -i "s|__PORT__|${PORT}|g" Dockerfile
          sed -i "s|__ARGO_PORT__|${ARGO_PORT}|g" Dockerfile
          
      - name: Commit and Push to new HF Space
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git rm --cached -r .github --ignore-unmatch
          git add Dockerfile README.md
          git commit --amend --no-edit
          git lfs install
          
          REMOTE_URL="https://user:${HF_TOKEN}@huggingface.co/spaces/${HF_USER}/${HF_SPACE}"
          git remote add space "${REMOTE_URL}"
          git push --force space HEAD:main
