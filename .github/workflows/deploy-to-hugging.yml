name: Deploy to Hugging Face

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'
  # push:
  #   branches:
  #     - main

jobs:
  deploy-and-sync:
    runs-on: ubuntu-latest
    
    env:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      UUID: ${{ secrets.UUID }}
      NEZHA_SERVER: ${{ secrets.NEZHA_SERVER }}
      NEZHA_PORT: ${{ secrets.NEZHA_PORT }}
      NEZHA_KEY: ${{ secrets.NEZHA_KEY }}
      ARGO_DOMAIN: ${{ secrets.ARGO_DOMAIN }}
      ARGO_AUTH: ${{ secrets.ARGO_AUTH }}
      CFIP: ${{ secrets.CFIP }}
      CFPORT: ${{ secrets.CFPORT }}
      NAME: ${{ secrets.NAME }}
      UPLOAD_URL: ${{ secrets.UPLOAD_URL }}
      PROJECT_URL: ${{ secrets.PROJECT_URL }}
      AUTO_ACCESS: ${{ secrets.AUTO_ACCESS }}
      FILE_PATH: ${{ secrets.FILE_PATH }}
      SUB_PATH: ${{ secrets.SUB_PATH }}
      PORT: ${{ secrets.PORT }}
      ARGO_PORT: ${{ secrets.ARGO_PORT }}

    steps:
      - name: Install Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install git-lfs -y

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: 'main'
          fetch-depth: 0
          lfs: true

      # ÂÖ≥ÈîÆ‰øÆÊîπÔºö‰ΩøÁî®ÂÆòÊñπ Python Â∫ìÈáçÂª∫ SpaceÔºå‰∏çÂÜç‰ΩøÁî® curl
      - name: Recreate Hugging Face Space via Python
        run: |
          # Ê≠•È™§A: ÂÆâË£ÖÂÆòÊñπÂ∫ì
          pip install "huggingface_hub>=0.20.0"

          # Ê≠•È™§B: Â∞ÜÂÅ•Â£ÆÁöÑPythonËÑöÊú¨ÂÜôÂÖ•Êñá‰ª∂
          cat << 'EOF' > manage_space.py
          import os
          import sys
          import time
          from huggingface_hub import HfApi
          from huggingface_hub.utils import RepositoryNotFoundError, HfHubHTTPError

          def main():
              hf_user = "yutian81"
              hf_space = "cmedt"
              token = os.environ.get("HF_TOKEN")
              repo_id = f"{hf_user}/{hf_space}"
              
              print(f"--- [PythonËÑöÊú¨] ÂáÜÂ§áËøõË°åÂÖ®Êñ∞ÈÉ®ÁΩ≤ ---")
              print(f"--- [PythonËÑöÊú¨] ÁõÆÊ†áSpace: {repo_id}")

              try:
                  api = HfApi(token=token)
                  print("--- [PythonËÑöÊú¨] HfApiÂÆ¢Êà∑Á´ØÂàùÂßãÂåñÊàêÂäü„ÄÇ")

                  # --- Âà†Èô§Êìç‰Ωú ---
                  print("\n--- [PythonËÑöÊú¨] Ê≠•È™§1: Ê≠£Âú®Â∞ùËØïÂà†Èô§ÊóßÁöÑSpace...")
                  try:
                      # È¶ñÂÖàÊ£ÄÊü•‰ªìÂ∫ìÊòØÂê¶Â≠òÂú®
                      api.repo_info(repo_id=repo_id, repo_type="space")
                      # Â¶ÇÊûúÂ≠òÂú®ÔºåÂàôÂà†Èô§
                      print(f"--- [PythonËÑöÊú¨] ÂèëÁé∞Â∑≤Â≠òÂú®ÁöÑSpace '{repo_id}'„ÄÇÊ≠£Âú®ÂèëÈÄÅÂà†Èô§ËØ∑Ê±Ç...")
                      api.delete_repo(repo_id=repo_id, repo_type="space")
                      print(f"--- [PythonËÑöÊú¨] Âà†Èô§ËØ∑Ê±ÇÂ∑≤ÂèëÈÄÅ„ÄÇÁ≠âÂæÖ10Áßí‰ª•Á°Æ‰øùÂêéÂè∞ÂÆåÊàêÊìç‰Ωú...")
                      time.sleep(10)
                  except RepositoryNotFoundError:
                      print(f"--- [PythonËÑöÊú¨] Space '{repo_id}' ‰∏çÂ≠òÂú®ÔºåÊó†ÈúÄÂà†Èô§„ÄÇ")
                  
                  # --- ÂàõÂª∫Êìç‰Ωú ---
                  print("\n--- [PythonËÑöÊú¨] Ê≠•È™§2: Ê≠£Âú®ÂàõÂª∫‰∏Ä‰∏™ÂÖ®Êñ∞ÁöÑÂÖçË¥πÁâàSpace...")
                  api.create_repo(
                      repo_id=repo_id,
                      repo_type="space",
                      space_sdk="docker",
                      space_hardware="cpu-basic", # ÊòéÁ°ÆÊåáÂÆöÂÖçË¥πÁ°¨‰ª∂
                      private=False,
                  )
                  print(f"--- [PythonËÑöÊú¨] ÊàêÂäüÂàõÂª∫ÂÖ®Êñ∞ÁöÑSpace: {repo_id}")

              except HfHubHTTPError as e:
                  print(f"--- [PythonËÑöÊú¨] ÂèëÁîüËá¥ÂëΩAPIÈîôËØØÔºÅ---")
                  print(f"ËØ∑Á´ãÂç≥Ê£ÄÊü•ÊÇ®ÁöÑ HF_TOKEN ÊòØÂê¶Êã•Êúâ 'write' ÊùÉÈôêÔºåÂπ∂‰∏îÂú®HFÁΩëÁ´ô‰∏äÊ≤°ÊúâÈÄüÁéáÈôêÂà∂„ÄÇ")
                  print(f"ËØ¶ÁªÜÈîôËØØ: {e}")
                  sys.exit(1)
              except Exception as e:
                  print(f"--- [PythonËÑöÊú¨] ÂèëÁîüÊú™Áü•ÈîôËØØ: {e}")
                  sys.exit(1)

          if __name__ == "__main__":
              main()
          EOF

          # Ê≠•È™§C: ÊâßË°åÊàë‰ª¨ÂàöÂàöÂàõÂª∫ÁöÑPythonËÑöÊú¨
          python manage_space.py

      - name: Create README.md for Space configuration
        run: |
          HF_SPACE="cmedt"
          echo "---
          title: ${HF_SPACE}
          emoji: üöÄ
          colorFrom: blue
          colorTo: green
          sdk: docker
          app_port: 3000
          ---
          " > README.md

      - name: Inject secrets into Dockerfile
        run: |
          sed -i "s|__UUID__|${UUID}|g" Dockerfile
          sed -i "s|__NEZHA_SERVER__|${NEZHA_SERVER}|g" Dockerfile
          sed -i "s|__NEZHA_PORT__|${NEZHA_PORT}|g" Dockerfile
          sed -i "s|__NEZHA_KEY__|${NEZHA_KEY}|g" Dockerfile
          sed -i "s|__ARGO_DOMAIN__|${ARGO_DOMAIN}|g" Dockerfile
          sed -i "s|__ARGO_AUTH__|${ARGO_AUTH}|g" Dockerfile
          sed -i "s|__CFIP__|${CFIP}|g" Dockerfile
          sed -i "s|__CFPORT__|${CFPORT}|g" Dockerfile
          sed -i "s|__NAME__|${NAME}|g" Dockerfile
          sed -i "s|__UPLOAD_URL__|${UPLOAD_URL}|g" Dockerfile
          sed -i "s|__PROJECT_URL__|${PROJECT_URL}|g" Dockerfile
          sed -i "s|__AUTO_ACCESS__|${AUTO_ACCESS}|g" Dockerfile
          sed -i "s|__FILE_PATH__|${FILE_PATH}|g" Dockerfile
          sed -i "s|__SUB_PATH__|${SUB_PATH}|g" Dockerfile
          sed -i "s|__PORT__|${PORT}|g" Dockerfile
          sed -i "s|__ARGO_PORT__|${ARGO_PORT}|g" Dockerfile
          
      - name: Commit and Push to new HF Space
        run: |
          HF_USER="yutian81"
          HF_SPACE="cmedt"
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git rm --cached -r .github --ignore-unmatch
          git add Dockerfile README.md
          git commit --amend --no-edit
          git lfs install
          REMOTE_URL="https://user:${HF_TOKEN}@huggingface.co/spaces/${HF_USER}/${HF_SPACE}"
          git remote add space "${REMOTE_URL}"
          git push --force space HEAD:main
