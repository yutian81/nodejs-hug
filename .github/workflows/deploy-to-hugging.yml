name: Deploy to Hugging Face

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'
  # push:
  #   branches:
  #     - main

jobs:
  deploy-and-sync:
    runs-on: ubuntu-latest
    
    env:
      # 只有 HF_TOKEN 和应用变量需要从 Secrets 读取
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      UUID: ${{ secrets.UUID }}
      NEZHA_SERVER: ${{ secrets.NEZHA_SERVER }}
      NEZHA_PORT: ${{ secrets.NEZHA_PORT }}
      NEZHA_KEY: ${{ secrets.NEZHA_KEY }}
      ARGO_DOMAIN: ${{ secrets.ARGO_DOMAIN }}
      ARGO_AUTH: ${{ secrets.ARGO_AUTH }}
      CFIP: ${{ secrets.CFIP }}
      CFPORT: ${{ secrets.CFPORT }}
      NAME: ${{ secrets.NAME }}
      UPLOAD_URL: ${{ secrets.UPLOAD_URL }}
      PROJECT_URL: ${{ secrets.PROJECT_URL }}
      AUTO_ACCESS: ${{ secrets.AUTO_ACCESS }}
      FILE_PATH: ${{ secrets.FILE_PATH }}
      SUB_PATH: ${{ secrets.SUB_PATH }}
      PORT: ${{ secrets.PORT }}
      ARGO_PORT: ${{ secrets.ARGO_PORT }}

    steps:
      - name: Install Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install git-lfs -y

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: 'main'
          fetch-depth: 0
          lfs: true

      - name: Recreate Hugging Face Space
        run: |
          HF_USER="yutian81"
          HF_SPACE="cmedt"
          SPACE_ID="${HF_USER}/${HF_SPACE}"
          DELETE_API_URL="https://huggingface.co/api/spaces/${SPACE_ID}"
          CREATE_API_URL="https://huggingface.co/api/repos/create"
          
          echo "--- 准备进行全新部署 ---"
          echo "目标Space: ${SPACE_ID}"

          echo "步骤1: 删除旧的Space (并检查结果)..."
          DELETE_RESPONSE=$(curl -s -w "\n%{http_code}" -X DELETE -H "Authorization: Bearer ${HF_TOKEN}" "${DELETE_API_URL}")
          DELETE_HTTP_CODE=$(echo "$DELETE_RESPONSE" | tail -n1)
          DELETE_BODY=$(echo "$DELETE_RESPONSE" | sed '$d')

          if [ "$DELETE_HTTP_CODE" -eq 200 ] || [ "$DELETE_HTTP_CODE" -eq 404 ]; then
            echo "旧环境清理成功 (状态码: ${DELETE_HTTP_CODE})。"
          else
            echo "错误：删除旧Space失败！ HTTP状态码: ${DELETE_HTTP_CODE}"
            echo "API响应: ${DELETE_BODY}"
            echo "请确认您的 HF_TOKEN 拥有 'write' 权限！"
            exit 1
          fi

          sleep 10

          echo "步骤2: 创建一个全新的免费版Space..."
          JSON_PAYLOAD=$(printf '{"repoId": "%s", "repoType": "space", "private": false}' "${SPACE_ID}")
          
          CREATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer ${HF_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "${JSON_PAYLOAD}" \
            "${CREATE_API_URL}")
          
          HTTP_CODE=$(echo "$CREATE_RESPONSE" | tail -n1)
          BODY=$(echo "$CREATE_RESPONSE" | sed '$d')

          if [ "$HTTP_CODE" -eq 201 ] || [ "$HTTP_CODE" -eq 200 ]; then
            echo "成功创建全新的Space: ${SPACE_ID}"
          else
            echo "错误：创建Space失败！ HTTP状态码: ${HTTP_CODE}"
            echo "API响应: ${BODY}"
            exit 1
          fi

      - name: Create README.md for Space configuration
        run: |
          HF_SPACE="cmedt"
          echo "---
          title: ${HF_SPACE}
          emoji: 🚀
          colorFrom: blue
          colorTo: green
          sdk: docker
          app_port: 3000
          ---
          " > README.md

      - name: Inject secrets into Dockerfile
        run: |
          sed -i "s|__UUID__|${UUID}|g" Dockerfile
          sed -i "s|__NEZHA_SERVER__|${NEZHA_SERVER}|g" Dockerfile
          sed -i "s|__NEZHA_PORT__|${NEZHA_PORT}|g" Dockerfile
          sed -i "s|__NEZHA_KEY__|${NEZHA_KEY}|g" Dockerfile
          sed -i "s|__ARGO_DOMAIN__|${ARGO_DOMAIN}|g" Dockerfile
          sed -i "s|__ARGO_AUTH__|${ARGO_AUTH}|g" Dockerfile
          sed -i "s|__CFIP__|${CFIP}|g" Dockerfile
          sed -i "s|__CFPORT__|${CFPORT}|g" Dockerfile
          sed -i "s|__NAME__|${NAME}|g" Dockerfile
          sed -i "s|__UPLOAD_URL__|${UPLOAD_URL}|g" Dockerfile
          sed -i "s|__PROJECT_URL__|${PROJECT_URL}|g" Dockerfile
          sed -i "s|__AUTO_ACCESS__|${AUTO_ACCESS}|g" Dockerfile
          sed -i "s|__FILE_PATH__|${FILE_PATH}|g" Dockerfile
          sed -i "s|__SUB_PATH__|${SUB_PATH}|g" Dockerfile
          sed -i "s|__PORT__|${PORT}|g" Dockerfile
          sed -i "s|__ARGO_PORT__|${ARGO_PORT}|g" Dockerfile
          
      - name: Commit and Push to new HF Space
        run: |
          HF_USER="yutian81"
          HF_SPACE="cmedt"
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git rm --cached -r .github --ignore-unmatch
          git add Dockerfile README.md
          git commit --amend --no-edit
          git lfs install
          REMOTE_URL="https://user:${HF_TOKEN}@huggingface.co/spaces/${HF_USER}/${HF_SPACE}"
          git remote add space "${REMOTE_URL}"
          git push --force space HEAD:main
